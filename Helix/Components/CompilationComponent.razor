@using Blazor.Diagrams.Components.Renderers;
@using Helix.Nodes
@using Helix.Types

@inject HelixDiagram Diagram

<style>
    .custom-node {
        min-width: 300px;
    }

    .custom-node .port {
        position: absolute;
        width: 20px;
        height: 20px;
        border-radius: 50%;
        background-color: #79bcdb;
        border: 3px solid #29A9E5;
        cursor: pointer;
        visibility: visible;
        transform: translate(-50%, -100%);
    }
    
    .custom-node .port.left {
        top: 50%;
        left: 0;
    }
    
    .custom-node .port:hover, .custom-node .port.has-links {
    background-color: black;
    }
</style>

<MudCard Class="pa-8 ma-0 darken-1 custom-node d-flex flex-column justify-center"
         @oncontextmenu:stopPropagation>
    <MudButton Class="mud-theme-primary" OnClick="OnCompile">
        Compile
    </MudButton>
    <MudTextField T="string"
                  DisableUnderLine="true"
                  Variant="Variant.Outlined" Lines="5"
                  @bind-Value="@Node.Text"
                  @onmousedown:stopPropagation @onmousemove:stopPropagation
                  @onwheel:stopPropagation/>
    @foreach (var port in Node.Ports)
    {
        <PortRenderer Port="port">
        </PortRenderer>
    }
</MudCard>

@code {
    [Parameter]
    public required CompilationNode Node { get; init; }
    
    private void OnCompile()
    {
        try
        {
            // Let's make use of these.
            var nodes = Compilation.compile(Node);
            
            // C# doesn't have Array.choose so I went for the next best thing.
            // Maybe there is a better way to do this? If you know, leave a comment.
            
            // Everything works as intended.
            // Thank you for watching.
            var text =
                nodes.SelectMany(x =>
                {
                    if (x is TextNode node)
                    {
                        return new [] { node.Text };
                    }
                    return new string [] { };
                });
            Node.Text = String.Join('\n', text);
        }
        catch (Compilation.CycleException ex)
        {
            Console.WriteLine("Compilation failed. There is a cycle in the graph.");
        }
    }
}