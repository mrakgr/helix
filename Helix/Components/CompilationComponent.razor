@using Blazor.Diagrams.Components.Renderers;
@using Helix.Types
@using static Helix.Nodes

<style>
    .custom-node {
        min-width: 300px;
    }

    .custom-node .port {
        position: absolute;
        width: 20px;
        height: 20px;
        border-radius: 50%;
        background-color: #79bcdb;
        border: 3px solid #29A9E5;
        cursor: pointer;
        visibility: visible;
        transform: translate(-50%, -100%);
    }
    
    .custom-node .port.left {
        top: 50%;
        left: 0;
    }
    
    .custom-node .port:hover, .custom-node .port.has-links {
        background-color: black;
    }
</style>

<MudCard Class="pa-8 ma-0 darken-1 custom-node d-flex flex-column justify-center"
         @onkeydown:stopPropagation @onkeyup:stopPropagation
         @oncontextmenu:stopPropagation>
    <MudButton Class="mud-theme-primary" OnClick="OnCompile">
        Compile
    </MudButton>
    <br/>
    <MudStack Spacing="0">
        @foreach (var x in Node.ChildComponent)
        {
            @x
        }
    </MudStack>
    @foreach (var port in Node.Ports)
    {
        <PortRenderer Port="port">
        </PortRenderer>
    }
</MudCard>

@code {

    [Parameter]
    [EditorRequired]
    public required CompilationNode Node { get; set; }


    RenderFragment OnCompileText(string text)
    {
        return @<MudText Typo="Typo.body1">
                   @text
               </MudText>;
    }
    
    private RenderFragment OnCompileImage(string path)
    {
        return @<MudImage Src="@path">
               </MudImage>;
    }

    private void OnCompile()
    {
        try
        {
            var nodes = Compilation.compile(Node);
            Node.ChildComponent = 
                nodes.SelectMany(x =>
                {
                    if (x is TextNode textNode)
                    {
                        return new[] { OnCompileText(textNode.Text) };
                    }
                    if (x is ImageNode imageNode)
                    {
                        return new[] { OnCompileImage(imageNode.Src.Url) };
                    }
                    return new RenderFragment[] { };
                });
        }
        catch (Compilation.CycleException)
        {
            Console.WriteLine("Compilation failed. There is a cycle in the graph.");
        }
    }



}