@page "/DiagramTrial"

@using Blazor.Diagrams.Core.Geometry
@using Helix.Components
@using Helix.Nodes
@using Helix.Types

@inject HelixDiagram Diagram

<MudMenu Label="Add Node" PositionAtCursor="true" ActivationEvent="MouseEvent.RightClick"
         Style="width: 100%; height: 100%;">
    <ActivatorContent>
        <CascadingValue Value="Diagram">
            <DiagramCanvas></DiagramCanvas>
        </CascadingValue>
    </ActivatorContent>
    <ChildContent>
        <MudMenuItem OnClick="AddTextNode">Text</MudMenuItem>
        <MudMenuItem OnClick="AddCompilationNode">Compilation</MudMenuItem>
    </ChildContent>
</MudMenu>

@code {
    
    // What Vilo is saying in the background actually happened two days ago.
    // Today we tried spinning up Stable Diffusion on Paperspace, and fell into
    // dependency hell. We wanted to make a quick video, and ended up wasting our
    // whole day.
    
    // We could blame that Youtube commenter, but in truth we wanted to be lead into
    // doing something like that.
    
    // We'll make Stable Diffusion videos after we get back to making VNs and upgrading
    // our art flow.
    
    // As for jobs, it will be a while until we can get one.
    // Currently, if you look at the chart of stock market's tech sector, or QQQ, you'll
    // see that it is rallying.
    
    // Real economy lags the stock market by about 6 months, and I think it will continue going
    // up so most likely, it is only a matter of time until hiring ramps up again.
    
    // Once that happens the money will trickle down to startups, consultants and contractors.
    
    // It is not worth taking rejections personally in this kind of market.
    
    // We need to get back into the swing of things on this VN compiler.
    // For now, let's just focus on making the image nodes.
    // ...
    // ...
    // ...

    private NodeModel NewTextNode(Point p)
    {
        var node = new TextNode(p) { Text = "" };
        node.AddPort(new HelixPort(node, PortAlignment.Left, true));
        node.AddPort(new HelixPort(node, PortAlignment.Right, false));
        return node;
    }

    private NodeModel NewCompilationNode(Point p)
    {
        var node = new CompilationNode(p) { Text = "" };
        node.AddPort(new HelixPort(node, PortAlignment.Left, true)); // It doesn't have an output port.
        return node;
    }

    private Point ToCanvasPoint(double x, double y)
    {
        return Diagram.GetRelativeMousePoint(x, y);
    }

    private void AddNode(MouseEventArgs ev, Func<Point, NodeModel> f)
    {
        Diagram.Nodes.Add(f(ToCanvasPoint(ev.ClientX, ev.ClientY)));
    }

    // If this was F# I'd use partial application here, but nwm that for now.
    private void AddTextNode(MouseEventArgs ev)
    {
        AddNode(ev, NewTextNode);
    }

    private void AddCompilationNode(MouseEventArgs ev)
    {
        AddNode(ev, NewCompilationNode);
    }

}