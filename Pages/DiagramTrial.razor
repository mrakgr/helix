@page "/DiagramTrial"

@using Blazor.Diagrams.Core.Geometry
@using Helix.Components
@using Helix.Nodes
@using System.Net.Mime

<MudMenu Label="Add Node" PositionAtCursor="true" ActivationEvent="MouseEvent.RightClick">
    <ActivatorContent>
        <div style="width: 70vw; height: 70vh">
            <CascadingValue Value="Diagram">
                <DiagramCanvas></DiagramCanvas>
            </CascadingValue>
        </div>
    </ActivatorContent>
    <ChildContent>
        <MudMenuItem OnClick="AddNode">Text</MudMenuItem>
        <MudMenuItem>Compilation</MudMenuItem>
    </ChildContent>
</MudMenu>

@code {
    private Diagram Diagram { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        var options = new DiagramOptions
        {
            // I had to disable virtualization due to the zoom throwing exceptions.
            // It should be fixed in the next version.
            EnableVirtualization = false, // Work around for: https://github.com/Blazor-Diagrams/Blazor.Diagrams/issues/322
            DeleteKey = "Delete", // What key deletes the selected nodes/links
            DefaultNodeComponent = null, // Default component for nodes
            AllowMultiSelection = true, // Whether to allow multi selection using CTRL
            Links = new DiagramLinkOptions // Options related to links
            {
            },
            Zoom = new DiagramZoomOptions // Other
            {
                Minimum = 0.1, // Minimum zoom value
                ScaleFactor = 1.3,
                Inverse = true, // Whether to inverse the direction of the zoom when using the wheel
            }
        };
        Diagram = new Diagram(options);
        Setup();
        
        Diagram.RegisterModelComponent<TextNode,TextComponent>();
    }

    private void Setup()
    {
        var f = (double x, double y) => NewDefaultNode(new Point(x, y));
        var node1 = f(50, 50);
        var node2 = f(300, 300);
        var node3 = f(300, 50);
        Diagram.Nodes.Add(new[] { node1, node2, node3 });
        Diagram.Links.Add(new LinkModel(node1.GetPort(PortAlignment.Right), node2.GetPort(PortAlignment.Left)));
    }

    private NodeModel NewDefaultNode(Point p)
    {
        // Ah, the ports are added here.
        var node = new NodeModel(p);
        node.AddPort(PortAlignment.Bottom);
        node.AddPort(PortAlignment.Top);
        node.AddPort(PortAlignment.Left);
        node.AddPort(PortAlignment.Right);
        return node;
    }
    
    private NodeModel NewTextNode(Point p)
    {
        var node = new TextNode(p) {Text="qwe"};
        // They are getting added here...
        node.AddPort(PortAlignment.Left);
        node.AddPort(PortAlignment.Right);
        return node;
    }

    private Point ToCanvasPoint(double x, double y)
    {
        return Diagram.GetRelativeMousePoint(x, y);
    }

    private void AddNode(MouseEventArgs ev)
    {
        Diagram.Nodes.Add(NewTextNode(ToCanvasPoint(ev.ClientX, ev.ClientY)));
    }

}