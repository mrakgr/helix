@page "/DiagramTrial"

@using Blazor.Diagrams.Core.Geometry
@using Helix.Components
@using Helix.Nodes
@using Helix.Types

@inject HelixDiagram Diagram

<MudMenu Label="Add Node" PositionAtCursor="true" ActivationEvent="MouseEvent.RightClick"
         Style="width: 100%; height: 100%;">
    <ActivatorContent>
        <CascadingValue Value="Diagram">
            <DiagramCanvas></DiagramCanvas>
        </CascadingValue>
    </ActivatorContent>
    <ChildContent>
        <MudMenuItem OnClick="AddTextNode">Text</MudMenuItem>
        <MudMenuItem OnClick="AddCompilationNode">Compilation</MudMenuItem>
    </ChildContent>
</MudMenu>

@code {

    private NodeModel NewTextNode(Point p)
    {
        var node = new TextNode(p) { Text = "" };
        node.AddPort(new HelixPort(node, PortAlignment.Left, true));
        node.AddPort(new HelixPort(node, PortAlignment.Right, false));
        return node;
    }

    private NodeModel NewCompilationNode(Point p)
    {
        var node = new CompilationNode(p) { Text = "" };
        node.AddPort(new HelixPort(node, PortAlignment.Left, true)); // It doesn't have an output port.
        return node;
    }

    private Point ToCanvasPoint(double x, double y)
    {
        return Diagram.GetRelativeMousePoint(x, y);
    }

    private void AddNode(MouseEventArgs ev, Func<Point, NodeModel> f)
    {
        Diagram.Nodes.Add(f(ToCanvasPoint(ev.ClientX, ev.ClientY)));
    }

    // If this was F# I'd use partial application here, but nwm that for now.
    private void AddTextNode(MouseEventArgs ev)
    {
        AddNode(ev, NewTextNode);
    }

    private void AddCompilationNode(MouseEventArgs ev)
    {
        AddNode(ev, NewCompilationNode);
    }

}