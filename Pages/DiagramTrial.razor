@page "/DiagramTrial"

@using Blazor.Diagrams.Core.Geometry
@using Helix.Components
@using Helix.Nodes

<MudMenu Label="Add Node" PositionAtCursor="true" ActivationEvent="MouseEvent.RightClick"
         Style="width: 100%; height: 100%;">
    <ActivatorContent>
        <CascadingValue Value="Diagram">
            <DiagramCanvas></DiagramCanvas>
        </CascadingValue>
    </ActivatorContent>
    <ChildContent>
        <MudMenuItem OnClick="AddTextNode">Text</MudMenuItem>
        <MudMenuItem OnClick="AddCompilationNode">Compilation</MudMenuItem>
    </ChildContent>
</MudMenu>

@code {
    private Diagram Diagram { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        var options = new DiagramOptions
        {
    // I had to disable virtualization due to the zoom throwing exceptions.
    // It should be fixed in the next version.
            EnableVirtualization = false, // Work around for: https://github.com/Blazor-Diagrams/Blazor.Diagrams/issues/322
            DeleteKey = "Delete", // What key deletes the selected nodes/links
            DefaultNodeComponent = null, // Default component for nodes
            AllowMultiSelection = true, // Whether to allow multi selection using CTRL
            Links = new DiagramLinkOptions // Options related to links
            {
            },
            Zoom = new DiagramZoomOptions // Other
            {
                Minimum = 0.1, // Minimum zoom value
                ScaleFactor = 1.3,
                Inverse = true, // Whether to inverse the direction of the zoom when using the wheel
            }
        };
        Diagram = new Diagram(options);

        Diagram.RegisterModelComponent<TextNode, TextComponent>();
        Diagram.RegisterModelComponent<CompilationNode, CompilationComponent>();
    }

    private NodeModel NewTextNode(Point p)
    {
        var node = new TextNode(p) { Text = "" };
        node.AddPort(new HelixPort(node, PortAlignment.Left, true));
        node.AddPort(new HelixPort(node, PortAlignment.Right, false));
        return node;
    }

    private NodeModel NewCompilationNode(Point p)
    {
        var node = new CompilationNode(p) { Text = "" };
        node.AddPort(new HelixPort(node, PortAlignment.Left, true)); // It doesn't have an output port.
        return node;
    }

    private Point ToCanvasPoint(double x, double y)
    {
        return Diagram.GetRelativeMousePoint(x, y);
    }

    private void AddNode(MouseEventArgs ev, Func<Point, NodeModel> f)
    {
        Diagram.Nodes.Add(f(ToCanvasPoint(ev.ClientX, ev.ClientY)));
    }

    // If this was F# I'd use partial application here, but nwm that for now.
    private void AddTextNode(MouseEventArgs ev)
    {
        AddNode(ev, NewTextNode);
    }

    private void AddCompilationNode(MouseEventArgs ev)
    {
        AddNode(ev, NewCompilationNode);
    }

}